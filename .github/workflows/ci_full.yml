name: CI Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  # -------------------------------
  # 1. Lint / Security
  # -------------------------------
  lint:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: 📦 Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: pip-${{ hashFiles('requirements*.txt') }}

      - name: 📑 Install linters and security tools
        run: |
          pip install -r requirements-lint.txt
          pip install bandit safety

      - name: 🔍 Run linters
        run: |
          ruff check .
          black --check .
          flake8 .
          bandit -r . || true
          safety scan || true


  # -------------------------------
  # 2. Unit Tests (local Postgres)
  # -------------------------------
  unit-tests:
    runs-on: ubuntu-latest
    needs: lint
    timeout-minutes: 30

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: saasuser
          POSTGRES_PASSWORD: saaspass
          POSTGRES_DB: saasdb_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U saasuser -d saasdb_test"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: 📑 Install dependencies
        run: |
          pip install -r requirements.txt -r requirements-dev.txt
          pip install coverage pytest-cov

      - name: 🔧 Prepare test environment
        run: |
          echo "🧩 Preparing .env.test for pytest..."
          export POSTGRES_HOST=localhost
          export POSTGRES_PORT=5432
          export POSTGRES_USER=saasuser
          export POSTGRES_PASSWORD=saaspass
          export POSTGRES_DB=saasdb_test
          envsubst < .env.ci > .env.test
          echo "✅ Final .env.test:"
          cat .env.test

      - name: 💤 Wait for PostgreSQL
        run: |
          until pg_isready -U saasuser -d saasdb_test -h localhost -p 5432; do
            echo "⏳ Waiting for PostgreSQL..."
            sleep 2
          done
          echo "✅ PostgreSQL is ready!"

      - name: 🛠 Apply migrations
        run: |
          set -o allexport
          source .env.test
          set +o allexport
          echo "🔍 Checking DB connection..."
          psql "$DATABASE_URL" -c "SELECT version();" || echo "⚠️ Cannot connect to DB"
          alembic upgrade head

      - name: 🧪 Run unit tests
        run: |
          set -o allexport
          source .env.test
          set +o allexport
          pytest -vv -m "not smoke" \
            --cov=saas_bot \
            --cov-report=xml \
            --cov-report=html \
            --log-cli-level=DEBUG


  # -------------------------------
  # 3. Build Docker image
  # -------------------------------
  build-image:
    runs-on: ubuntu-latest
    needs: unit-tests
    timeout-minutes: 20

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: 📦 Build Docker image
        run: |
          echo "Building docker image..."
          docker build -t saasbot:ci .
          docker images saasbot:ci

      - name: 🧪 Run container sanity check
        run: |
          echo "Testing container startup..."
          docker run --rm saasbot:ci python -c "print('✅ Container runs Python OK')"



  # -------------------------------
  # 4. Smoke Tests (compose + built image)
  # -------------------------------
  smoke-tests:
    runs-on: ubuntu-latest
    needs: build-image
    timeout-minutes: 30

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐳 Ensure docker-compose available
        run: docker compose version || docker --version

      - name: 🧹 Remove any default .env
        run: rm -f .env

      - name: 🔧 Prepare smoke env
        run: cp .env.smoke .env.smoke # redundant but explicit

      - name: 🚀 Run smoke tests (isolated)
        run: |
          docker compose -f docker-compose.smoke.yml \
            --env-file .env.smoke \
            up --abort-on-container-exit --exit-code-from bot

      - name: 🧹 Cleanup containers
        if: always()
        run: docker compose -f docker-compose.smoke.yml down -v --remove-orphans || true


      - name: 📦 Upload smoke test logs and reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: smoke-test-results
          path: test-reports/
          if-no-files-found: ignore
