import asyncio
import logging
import os

from aiogram import Bot
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

from database import init_db, async_session_maker
from services import notify_jobs

logging.basicConfig(
    level=logging.INFO, format="%(asctime)s [%(levelname)s] %(name)s: %(message)s"
)
logger = logging.getLogger("worker")

BOT_TOKEN = os.getenv("BOT_TOKEN")


async def run_jobs():
    """–û–±–µ—Ä—Ç–æ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞—á"""
    async with async_session_maker() as session:
        bot = Bot(BOT_TOKEN)
        await notify_jobs.run_all(session, bot)
        await bot.session.close()
    logger.info("‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")


async def main():
    logger.info("üöÄ Worker started")
    await init_db()

    scheduler = AsyncIOScheduler(timezone="UTC")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 09:00 UTC
    scheduler.add_job(run_jobs, CronTrigger(hour=9, minute=0))

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ —Å—Ä–∞–∑—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    asyncio.create_task(run_jobs())

    scheduler.start()

    # –í–µ—á–Ω—ã–π —Ü–∏–∫–ª
    while True:
        await asyncio.sleep(3600)


if __name__ == "__main__":
    asyncio.run(main())
