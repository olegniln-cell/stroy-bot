# services/notifications/scheduler.py
import asyncio
import logging
from datetime import datetime, timedelta
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from models.task import Task
from utils.enums import TaskStatus
from services.notifications.tasks import send_task_notification

logger = logging.getLogger(__name__)

CHECK_INTERVAL_MINUTES = 10  # –∫–∞–∫ —á–∞—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å
DEADLINE_SOON_HOURS = 24  # –∑–∞ —Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å


async def check_deadlines(bot, session: AsyncSession):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–µ–¥–ª–∞–π–Ω—ã –∏ —Ä–∞—Å—Å—ã–ª–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
    now = datetime.utcnow()
    soon = now + timedelta(hours=DEADLINE_SOON_HOURS)

    # 1Ô∏è‚É£ –ó–∞–¥–∞—á–∏ —Å–æ —Å—Ä–æ–∫–æ–º —Å–µ–≥–æ–¥–Ω—è
    soon_tasks_q = await session.execute(
        select(Task).where(
            Task.status.in_([TaskStatus.todo.value, TaskStatus.in_progress.value]),
            Task.deleted_at.is_(None),
            Task.company_id.isnot(None),
            Task.created_at
            <= soon,  # –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ Task.deadline, –µ—Å–ª–∏ –ø–æ—è–≤–∏—Ç—Å—è –ø–æ–ª–µ
        )
    )
    soon_tasks = soon_tasks_q.scalars().all()

    # 2Ô∏è‚É£ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
    overdue_tasks_q = await session.execute(
        select(Task).where(
            Task.status.in_([TaskStatus.todo.value, TaskStatus.in_progress.value]),
            Task.deleted_at.is_(None),
            Task.company_id.isnot(None),
            Task.created_at
            < now - timedelta(days=3),  # –≤—Ä–µ–º–µ–Ω–Ω–æ, –ø–æ–∫–∞ –Ω–µ—Ç Task.deadline
        )
    )
    overdue_tasks = overdue_tasks_q.scalars().all()

    # 3Ô∏è‚É£ –†–∞—Å—Å—ã–ª–∫–∞
    for task in soon_tasks:
        await send_task_notification(bot, session, task, "deadline_soon")
    for task in overdue_tasks:
        await send_task_notification(bot, session, task, "deadline_overdue")

    if soon_tasks or overdue_tasks:
        await session.commit()
        logger.info(
            f"üîî –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: —Å–µ–≥–æ–¥–Ω—è={len(soon_tasks)}, –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ={len(overdue_tasks)}"
        )


def start_scheduler(bot, session_factory):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π."""
    scheduler = AsyncIOScheduler(timezone="UTC")

    async def job_wrapper():
        async with session_factory() as session:
            try:
                await check_deadlines(bot, session)
            except Exception as e:
                logger.exception(
                    f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ñ–æ–Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–µ–¥–ª–∞–π–Ω–æ–≤: {e}"
                )

    scheduler.add_job(
        lambda: asyncio.create_task(job_wrapper()),
        trigger="interval",
        minutes=CHECK_INTERVAL_MINUTES,
        id="deadline_checker",
        replace_existing=True,
    )

    scheduler.start()
    logger.info(f"üïí Scheduler started ‚Äî interval {CHECK_INTERVAL_MINUTES} min")
