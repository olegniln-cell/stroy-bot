# services/seed.py
# -*- coding: utf-8 -*-
import logging
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.dialects.postgresql import insert
from models.plan import Plan

logger = logging.getLogger(__name__)

DEFAULT_PLANS = [
    {
        "code": "free",
        "name": "Free",
        "monthly_price": 0,
        "period_days": 30,
        "features": {},
    },
    {
        "code": "pro",
        "name": "Pro",
        "monthly_price": 29,
        "period_days": 30,
        "features": {},
    },
    {
        "code": "enterprise",
        "name": "Enterprise",
        "monthly_price": 199,
        "period_days": 365,
        "features": {},
    },
]


async def seed_plans(session: AsyncSession) -> None:
    """
    UPSERT —Ç–∞—Ä–∏—Ñ–æ–≤: –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª—è, –µ—Å–ª–∏ —Ç–∞—Ä–∏—Ñ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
    """
    for plan in DEFAULT_PLANS:
        stmt = insert(Plan).values(**plan)
        update_fields = {
            "name": stmt.excluded.name,
            "monthly_price": stmt.excluded.monthly_price,
            "period_days": stmt.excluded.period_days,
        }
        # –µ—Å–ª–∏ –∫–æ–ª–æ–Ω–∫–∞ features –µ—Å—Ç—å –≤ –º–æ–¥–µ–ª–∏, –¥–æ–±–∞–≤–ª—è–µ–º –≤ UPSERT
        if hasattr(Plan, "features"):
            update_fields["features"] = stmt.excluded.features

        stmt = stmt.on_conflict_do_update(
            index_elements=["code"],
            set_=update_fields,
        )
        await session.execute(stmt)

        logger.info(
            "üîÑ –¢–∞—Ä–∏—Ñ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω: %s | %s | %s$/–º–µ—Å | %s –¥–Ω–µ–π",
            plan["code"],
            plan["name"],
            plan["monthly_price"],
            plan["period_days"],
        )

    await session.commit()
    logger.info("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç–∞—Ä–∏—Ñ–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (—Å–æ–∑–¥–∞–Ω—ã/–æ–±–Ω–æ–≤–ª–µ–Ω—ã)")
