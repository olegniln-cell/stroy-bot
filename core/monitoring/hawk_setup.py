import os
import structlog
import hawkcatcher

logger = structlog.get_logger(__name__)


def setup_hawk():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Hawk SDK (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ —Å hawkcatcher 3.4.1)."""
    dsn = os.getenv("HAWK_DSN")
    if not dsn:
        logger.warning("‚ö†Ô∏è HAWK_DSN not provided ‚Äî Hawk disabled.")
        return

    try:
        # –í –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ init –ø—Ä–∏–Ω–∏–º–∞–µ—Ç dsn –±–µ–∑ –∏–º–µ–Ω–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
        hawkcatcher.init(dsn)
        logger.info("ü¶Ö Hawk initialized successfully (v3.4.1 API)")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Hawk initialization failed: {e}")


def capture_exception(e: Exception):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –≤ Hawk (–Ω–æ–≤—ã–π API)."""
    try:
        hawkcatcher.send(e)
    except Exception as err:
        logger.warning(f"‚ö†Ô∏è Failed to send exception to Hawk: {err}")


def capture_message(msg):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –≤ Hawk."""
    try:
        if isinstance(msg, BaseException):
            hawkcatcher.send(msg)
        else:
            hawkcatcher.send(Exception(str(msg)))
    except Exception as err:
        logger.warning(f"‚ö†Ô∏è Failed to send message to Hawk: {err}")
