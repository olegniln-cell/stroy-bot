# handlers/tasks.py
from aiogram import Router, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from sqlalchemy.ext.asyncio import AsyncSession
from models.user import User
from models.project import Project
from services.tasks import (
    create_task,
    get_my_tasks,
    set_task_status,
    get_task_by_id_and_company,
)
from services.projects import get_project_by_id_and_company
from services.audit import log_action
from utils.decorators import is_manager_or_foreman
from utils.enums import TaskStatus
import logging

router = Router()
logger = logging.getLogger(__name__)

# ========== HELPERS ==========


def task_inline_keyboard(task_id: int, status: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥ –∑–∞–¥–∞—á–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞."""
    buttons = []

    if status == TaskStatus.todo.value:
        buttons.append(
            [
                InlineKeyboardButton(
                    text="‚úÖ –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"take_task:{task_id}"
                )
            ]
        )
    elif status == TaskStatus.in_progress.value:
        buttons.append(
            [
                #        InlineKeyboardButton(text="üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ", callback_data=f"attach_file:{task_id}"),
                InlineKeyboardButton(
                    text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"complete_task:{task_id}"
                ),
            ]
        )
    elif status == TaskStatus.ready.value:
        buttons.append(
            [
                InlineKeyboardButton(
                    text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data=f"review_task:{task_id}"
                )
            ]
        )

    # –û–±—â–∏–µ –∫–Ω–æ–ø–∫–∏
    buttons.append(
        [
            InlineKeyboardButton(
                text="üìÑ –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"details_task:{task_id}"
            )
        ]
    )
    return InlineKeyboardMarkup(inline_keyboard=buttons)


# ========== COMMAND HANDLERS ==========


@router.message(Command("add_task"))
@is_manager_or_foreman
async def add_task_cmd(message: types.Message, session: AsyncSession, user: User):
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")

    args = message.text.split(maxsplit=3)
    if len(args) < 3:
        await message.answer(
            "–ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: /add_task <project_id> <–∑–∞–≥–æ–ª–æ–≤–æ–∫> [–æ–ø–∏—Å–∞–Ω–∏–µ]"
        )
        return

    try:
        project_id = int(args[1])
        title = args[2].strip()
        description = args[3].strip() if len(args) > 3 else ""
    except (ValueError, IndexError):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. ID –ø—Ä–æ–µ–∫—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    project = await get_project_by_id_and_company(session, project_id, user.company_id)
    if not project:
        await message.answer("–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏.")
        return

    task = await create_task(
        session, title, description, project_id, user.company_id, user.id
    )

    await log_action(
        session,
        actor_user_id=user.id,
        actor_tg_id=user.tg_id,
        action="create_task",
        entity_type="Task",
        entity_id=task.id,
        payload={"title": task.title, "project_id": project_id},
    )

    await message.answer(
        f"‚úÖ –ó–∞–¥–∞—á–∞ *{task.title}* —Å–æ–∑–¥–∞–Ω–∞ –≤ –ø—Ä–æ–µ–∫—Ç–µ *{project.name}*.",
        reply_markup=task_inline_keyboard(task.id, task.status),
        parse_mode="Markdown",
    )


@router.message(Command("my_tasks"))
async def my_tasks_cmd(message: types.Message, session: AsyncSession, user: User):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏."""
    if not user.company_id:
        await message.answer("–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–æ–º–ø–∞–Ω–∏–∏.")
        return

    tasks = await get_my_tasks(session, user.id)
    if not tasks:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.")
        return

    for task in tasks:
        task.project = await session.get(Project, task.project_id)

        text = (
            f"üìã *{task.title}*\n"
            f"–ü—Ä–æ–µ–∫—Ç: {task.project.name}\n"
            f"–°—Ç–∞—Ç—É—Å: {task.status}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {task.description or '‚Äî'}"
        )

        await message.answer(
            text,
            reply_markup=task_inline_keyboard(task.id, task.status),
            parse_mode="Markdown",
        )


# ========== CALLBACKS ==========


@router.callback_query(lambda c: c.data.startswith("take_task:"))
async def take_task_cb(callback: CallbackQuery, session: AsyncSession, user: User):
    """–†–∞–±–æ—á–∏–π –±–µ—Ä—ë—Ç –∑–∞–¥–∞—á—É –≤ —Ä–∞–±–æ—Ç—É."""
    task_id = int(callback.data.split(":")[1])
    task = await set_task_status(
        session, task_id, TaskStatus.in_progress.value, user.company_id
    )
    if not task:
        await callback.answer("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return

    await session.commit()

    if not task:
        await callback.answer("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return

    await callback.message.edit_text(
        f"üõ† –¢—ã –≤–∑—è–ª –∑–∞–¥–∞—á—É *{task.title}* –≤ —Ä–∞–±–æ—Ç—É.",
        reply_markup=task_inline_keyboard(task.id, task.status),
        parse_mode="Markdown",
    )

    await log_action(
        session,
        actor_user_id=user.id,
        actor_tg_id=user.tg_id,
        action="take_task",
        entity_type="Task",
        entity_id=task.id,
        payload={"status": task.status},
    )
    await session.commit()

    await callback.answer("–ó–∞–¥–∞—á–∞ –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É ‚úÖ")


@router.callback_query(lambda c: c.data.startswith("complete_task:"))
async def complete_task_cb(callback: CallbackQuery, session: AsyncSession, user: User):
    """–†–∞–±–æ—á–∏–π –∑–∞–≤–µ—Ä—à–∞–µ—Ç –∑–∞–¥–∞—á—É."""
    task_id = int(callback.data.split(":")[1])
    task = await set_task_status(
        session, task_id, TaskStatus.ready.value, user.company_id
    )
    await session.commit()

    if not task:
        await callback.answer("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    await callback.message.edit_text(
        f"‚úÖ –ó–∞–¥–∞—á–∞ *{task.title}* –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.",
        reply_markup=task_inline_keyboard(task.id, TaskStatus.ready.value),
        parse_mode="Markdown",
    )

    await log_action(
        session,
        user.id,
        user.tg_id,
        "complete_task",
        "Task",
        task.id,
        {"status": task.status},
    )
    await callback.answer("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É üîç")


@router.callback_query(lambda c: c.data.startswith("details_task:"))
async def details_task_cb(callback: CallbackQuery, session: AsyncSession, user: User):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞—á–∏."""
    task_id = int(callback.data.split(":")[1])
    task = await get_task_by_id_and_company(session, task_id, user.company_id)
    if not task:
        await callback.answer("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    project = await session.get(Project, task.project_id)
    text = (
        f"üìÑ *{task.title}*\n"
        f"–ü—Ä–æ–µ–∫—Ç: {project.name}\n"
        f"–°—Ç–∞—Ç—É—Å: {task.status}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {task.description or '‚Äî'}\n"
        f"–°–æ–∑–¥–∞–Ω–∞: {task.created_at.strftime('%d.%m.%Y %H:%M')}"
    )

    await callback.message.edit_text(
        text,
        reply_markup=task_inline_keyboard(task.id, task.status),
        parse_mode="Markdown",
    )
    await callback.answer()
