# app/handlers/start.py
import logging
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy.ext.asyncio import AsyncSession
from models.user import User
from services.users import set_user_role_and_company
from utils.enums import UserRole

router = Router(name="start")
logger = logging.getLogger(__name__)

# –í—Å–µ —Ä–æ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ (–¥–ª—è –∫–Ω–æ–ø–æ–∫)
role_map = {
    "—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å": UserRole.manager,
    "–±—Ä–∏–≥–∞–¥–∏—Ä": UserRole.foreman,
    "—Ä–∞–±–æ—á–∏–π": UserRole.worker,
    "–∫–ª–∏–µ–Ω—Ç": UserRole.client,
    "–ø–æ—Å—Ç–∞–≤—â–∏–∫": UserRole.supplier,
    "–±—É—Ö–≥–∞–ª—Ç–µ—Ä": UserRole.accountant,
}

# –†–∞–±–æ—á–∏–µ —Ä–æ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–∞–ª—å–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω—ã —Å–µ–π—á–∞—Å
available_roles = {
    UserRole.manager,
    UserRole.foreman,
    UserRole.worker,
}


@router.message(Command("start"))
async def start_cmd(message: types.Message, user: User):
    """–•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start"""
    if user.company_id:
        await message.answer(
            f"–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–æ–º–ø–∞–Ω–∏–∏ ID={user.company_id}.\n"
            f"–ö–æ–º–∞–Ω–¥—ã: /buy ‚Äî –æ–ø–ª–∞—Ç–∞, /admin_company_status <id> ‚Äî —Å—Ç–∞—Ç—É—Å (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)."
        )
        return

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –∏–∑ role_map
    kb = InlineKeyboardBuilder()
    for label in role_map.keys():
        kb.button(text=label.capitalize(), callback_data=f"set_role:{label}")
    kb.adjust(1)

    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:", reply_markup=kb.as_markup()
    )


@router.callback_query(F.data.startswith("set_role:"))
async def callback_set_role(
    callback: types.CallbackQuery, session: AsyncSession, user: User
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏"""

    raw_role = callback.data.split(":", 1)[1]
    role = role_map.get(raw_role)

    if not role:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å", show_alert=True)
        return

    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –µ—â—ë –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ä–æ–ª–µ–π
    if role not in available_roles:
        await callback.answer("‚ö†Ô∏è –≠—Ç–∞ —Ä–æ–ª—å –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
        return

    try:
        await set_user_role_and_company(session, user.id, role)

        if role == UserRole.manager:
            txt = (
                "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å.\n"
                "–°–æ–∑–¥–∞–π—Ç–µ –≤–∞—à—É –∫–æ–º–ø–∞–Ω–∏—é:\n"
                "`/create_company <–ù–∞–∑–≤–∞–Ω–∏–µ–ö–æ–º–ø–∞–Ω–∏–∏>`"
            )
        else:
            txt = (
                f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã {raw_role}.\n"
                "–ß—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–ø–∞–Ω–∏–∏, –∑–∞–ø—Ä–æ—Å–∏—Ç–µ ID —É —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
                "`/join <ID –∫–æ–º–ø–∞–Ω–∏–∏>`"
            )

        await callback.message.edit_text(txt, parse_mode="Markdown")
        await callback.answer()

    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –≤ callback_set_role")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
