# services/notifications/tasks.py
from aiogram import Bot
from sqlalchemy.ext.asyncio import AsyncSession
from models.user import User
from models.task import Task
from utils.enums import UserRole
import logging

logger = logging.getLogger(__name__)

# –í—Å–µ —Ç–µ–∫—Å—Ç—ã –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ—Ç–æ–º –≤—ã–Ω–µ—Å—Ç–∏ –≤ messages.yaml
TASK_MESSAGES = {
    "new_task": "üÜï –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞: *{title}*\n–ü—Ä–æ–µ–∫—Ç: {project}\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}",
    "taken": "üõ† {worker_name} –≤–∑—è–ª –∑–∞–¥–∞—á—É *{title}* –≤ —Ä–∞–±–æ—Ç—É.",
    "completed": "‚úÖ {worker_name} –∑–∞–≤–µ—Ä—à–∏–ª –∑–∞–¥–∞—á—É *{title}*.",
    "approved": "üéØ –ó–∞–¥–∞—á–∞ *{title}* –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ –∏ –æ–¥–æ–±—Ä–µ–Ω–∞.",
    "rejected": "‚ö†Ô∏è –ó–∞–¥–∞—á–∞ *{title}* –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É.",
    "deadline_soon": "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —Å—Ä–æ–∫ –∑–∞–¥–∞—á–∏ *{title}* ‚Äî —Å–µ–≥–æ–¥–Ω—è!",
    "deadline_overdue": "üö® –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–∞ –∑–∞–¥–∞—á–∞ *{title}* (—Å—Ä–æ–∫: {deadline}).",
}


async def _get_manager_and_foreman(session: AsyncSession, company_id: int):
    """–ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—è–º–∏ manager/foreman."""
    result = await session.execute(
        User.__table__.select().where(User.company_id == company_id)
    )
    users = result.fetchall()
    return [
        u for u in users if u.role in (UserRole.manager.value, UserRole.foreman.value)
    ]


async def send_task_notification(
    bot: Bot,
    session: AsyncSession,
    task: Task,
    template_key: str,
    actor_name: str | None = None,
):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω—É–∂–Ω—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –ø–æ —Ç–∏–ø—É —Å–æ–±—ã—Ç–∏—è."""
    text = TASK_MESSAGES[template_key].format(
        title=task.title,
        project=task.project_id,
        description=task.description or "‚Äî",
        worker_name=actor_name or "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å",
        deadline=getattr(task, "deadline", "–Ω–µ –∑–∞–¥–∞–Ω"),
    )

    recipients = []

    # 1. –ö–æ–º—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å?
    if template_key == "new_task":
        # –†–∞–±–æ—á–µ–º—É, –µ—Å–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω
        if task.user_id:
            user = await session.get(User, task.user_id)
            if user and user.tg_id:
                recipients.append(user.tg_id)
    elif template_key in ("taken", "completed", "approved", "rejected"):
        # –ú–µ–Ω–µ–¥–∂–µ—Ä—É –∏ –ø—Ä–æ—Ä–∞–±—É
        managers = await _get_manager_and_foreman(session, task.company_id)
        recipients.extend([u.tg_id for u in managers if u.tg_id])
    elif template_key in ("deadline_soon", "deadline_overdue"):
        # –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
        user = await session.get(User, task.user_id)
        if user and user.tg_id:
            recipients.append(user.tg_id)

    # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    for tg_id in recipients:
        try:
            await bot.send_message(chat_id=tg_id, text=text, parse_mode="Markdown")
        except Exception as e:
            logger.error(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {template_key} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tg_id}: {e}"
            )
