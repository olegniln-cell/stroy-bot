# handlers/review.py
from aiogram import Router, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from sqlalchemy.ext.asyncio import AsyncSession
from models.user import User
from services.tasks import get_task_by_id_and_company, set_task_status
from services.notifications.tasks import send_task_notification
from services.audit import log_action
from utils.enums import TaskStatus
from utils.decorators import is_manager_or_foreman
import logging

router = Router()
logger = logging.getLogger(__name__)


# ======== HELPERS ==========
def review_keyboard(task_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞—á–∏."""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"approve_task:{task_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üîÅ –ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É", callback_data=f"reject_task:{task_id}"
                )
            ],
        ]
    )


# ======== HANDLERS ==========


@router.message(Command("review_task"))
@is_manager_or_foreman
async def review_task_cmd(message: types.Message, session: AsyncSession, user: User):
    """–†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ ID –∑–∞–¥–∞—á–∏."""
    args = message.text.split()
    if len(args) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /review_task <task_id>")
        return

    try:
        task_id = int(args[1])
    except ValueError:
        await message.answer("ID –∑–∞–¥–∞—á–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    task = await get_task_by_id_and_company(session, task_id, user.company_id)
    if not task:
        await message.answer("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    await message.answer(
        f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞—á–∏: *{task.title}*\n–û–ø–∏—Å–∞–Ω–∏–µ: {task.description or '‚Äî'}",
        reply_markup=review_keyboard(task.id),
        parse_mode="Markdown",
    )


# ======== CALLBACKS ==========


@router.callback_query(lambda c: c.data.startswith("approve_task:"))
async def approve_task_cb(
    callback: CallbackQuery, session: AsyncSession, user: User, bot
):
    """–ü—Ä–∏–Ω–∏–º–∞–µ–º –∑–∞–¥–∞—á—É."""
    task_id = int(callback.data.split(":")[1])
    task = await set_task_status(
        session, task_id, TaskStatus.ready.value, user.company_id
    )
    await session.commit()

    await log_action(
        session,
        user.id,
        user.tg_id,
        "approve_task",
        "Task",
        task_id,
        {"status": task.status},
    )
    await send_task_notification(
        bot, session, task, "approved", user.username or user.tg_id
    )

    await callback.message.edit_text(
        f"üéØ –ó–∞–¥–∞—á–∞ *{task.title}* –ø—Ä–∏–Ω—è—Ç–∞.",
        parse_mode="Markdown",
    )
    await callback.answer("–ó–∞–¥–∞—á–∞ –ø—Ä–∏–Ω—è—Ç–∞ ‚úÖ")


@router.callback_query(lambda c: c.data.startswith("reject_task:"))
async def reject_task_cb(
    callback: CallbackQuery, session: AsyncSession, user: User, bot
):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É."""
    task_id = int(callback.data.split(":")[1])
    task = await set_task_status(
        session, task_id, TaskStatus.in_progress.value, user.company_id
    )
    await session.commit()

    await log_action(
        session,
        user.id,
        user.tg_id,
        "reject_task",
        "Task",
        task_id,
        {"status": task.status},
    )
    await send_task_notification(
        bot, session, task, "rejected", user.username or user.tg_id
    )

    await callback.message.edit_text(
        f"‚ö†Ô∏è –ó–∞–¥–∞—á–∞ *{task.title}* –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É.",
        parse_mode="Markdown",
    )
    await callback.answer("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É üîÅ")
