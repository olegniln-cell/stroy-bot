# ===============================
# üìå Makefile –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–º saas_bot
# ===============================

# üü¢ –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –≤—Å–µ —Ü–µ–ª–∏ ‚Äî ¬´—Ñ–∞–ª—å—à–∏–≤—ã–µ¬ª, –∞ –Ω–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤
.PHONY: help \
        up down stop restart build rebuild logs \
        migrate current reset fresh \
        psql testpsql \
        seed ch_seed check-fk check_models tenum \
        test

POSTGRES_VOLUME = saas_bot_postgres_data


# ===============================
# üîπ –û—Å–Ω–æ–≤–Ω–∞—è –ø–æ–º–æ—â—å
# ===============================
help:
	@echo ""
	@echo "üöÄ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
	@echo ""
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "  \033[36m%-15s\033[0m %s\n", $$1, $$2}' $(MAKEFILE_LIST)
	@echo ""

safe-down-v: ## –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ —É–¥–∞–ª–∏—Ç—å –í–°–ï –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∏ –¥–∞–Ω–Ω—ã–µ (—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º)
	@read -p "‚ö†Ô∏è –≠—Ç–æ —É–¥–∞–ª–∏—Ç volume —Å PostgreSQL. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (yes/no): " confirm; \
	if [ "$$confirm" = "yes" ]; then \
		docker-compose down -v; \
	else \
		echo "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ."; \
	fi




# ===============================
# üîπ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞–º–∏
# ===============================

check-volume:
	@if docker volume inspect $(POSTGRES_VOLUME) >/dev/null 2>&1; then \
		echo "‚úÖ Volume $(POSTGRES_VOLUME) –Ω–∞–π–¥–µ–Ω ‚Äî –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã."; \
	else \
		echo "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: Volume $(POSTGRES_VOLUME) –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –±–∞–∑–∞ —Å–æ–∑–¥–∞—Å—Ç—Å—è –∑–∞–Ω–æ–≤–æ!"; \
	fi


up: check-volume ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã (–±–æ—Ç, –ë–î, Redis, MinIO) –≤ —Ñ–æ–Ω–µ
	docker-compose up -d


upbb: ## –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –±—ã—Å—Ç—Ä–∞—è
	docker compose build bot

upup: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã (–±–æ—Ç, –ë–î, Redis, MinIO) –≤ —Ñ–æ–Ω–µ
	docker-compose up -d --build bot

up2: ##–ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫
	docker-compose up --build bot

ups: ## –ü–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å –∏ —Å—Ä–∞–∑—É –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã
	docker-compose up --build -d

upc: ## –ü–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å c –Ω—É–ª—è —É–¥–∞–ª–µ–Ω–∏–µ –∫–µ—à–∞
	docker-compose build --no-cache


uptt: ## –ø—Ä–æ—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–∑–∞ —Å –Ω—É–ª—è –µ—Å–ª–∏ –≤–¥—Ä—É–≥ —á—Ç–æ -—Ç–æ –æ—Å—Ç–∞–ª–æ—Å—å –≤ –∫–µ—à–µ
	docker compose -f docker-compose.test.yml build --no-cache bot


upb: ## –ü–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ bot
	docker-compose up --build -d bot

upcb: ## –ü–µ—Ä–µ—Å–æ–±—Ä–∫–∞ –∑–∞–Ω–æ–≤–∞ —Å –æ—á–∏—Å—Ç–∫–æ–π –∫–µ—à–∞
	docker compose build --no-cache bot


down: ## –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
	docker-compose down

stop: ## –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã (–±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è)
	docker-compose stop

restart: ## –ü–æ–ª–Ω—ã–π —Ä–µ—Å—Ç–∞—Ä—Ç: –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–Ω–æ–≤–æ —Å –ø–µ—Ä–µ—Å–±–æ—Ä–∫–æ–π
	docker-compose down
	docker-compose up --build -d

logs: ## –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–∞ bot –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
	docker-compose logs -f bot

cbd: ## –ë–µ–∫–∞–ø –±–∞–∑—ã –≤ –∫–æ—Ä–µ–Ω—å
	docker-compose exec db pg_dump -U saasuser saasdb > backup.sql

cf: ## –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
	python3 merge_code.py



# ===============================
# üîπ  –°–ú–û–ö –¢–ï–°–¢–´ –í CI
# ===============================

cor: ## —Ç–æ–ª—å–∫–æ core
	pytest -m smoke_core -v

bil: ## —Ç–æ–ª—å–∫–æ –±–∏–ª–∏–Ω–≥
	docker compose run --rm bot pytest -vv tests/smoke/test_billing_flow.py


fil: ## —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã
	pytest -m smoke_files -v

vt: ## –≤—Å–µ
	pytest -m smoke -v

bpy: ##
	docker compose run --rm bot pytest -m smoke -v








# ===============================
# üîπ  –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ (docker-compose)
# ===============================

sk: ## —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
	docker ps

vs: ## —Å–µ—Ç—å docker-compose. –û–±—ã—á–Ω–æ docker-compose —Å–æ–∑–¥–∞—ë—Ç —Å–µ—Ç—å —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º <project>_default.
	docker network ls

kc: ## –£–∑–Ω–∞—Ç—å, –∫–∞–∫–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Å–∏–¥—è—Ç –≤ —Å–µ—Ç–∏ Containers ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤, –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã—Ö –∫ —Å–µ—Ç–∏
## –ò—Ö IP –∏ –∏–º–µ–Ω–∞ (–∏–º–µ–Ω–Ω–æ —ç—Ç–∏ –∏–º–µ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ DATABASE_URL, –Ω–∞–ø—Ä–∏–º–µ—Ä saasbot_test_db)
	docker network inspect saas_bot_default




# ===============================
# üîπ –°–±–æ—Ä–∫–∞
# ===============================
build: ## –ü–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å –æ–±—Ä–∞–∑—ã –±–µ–∑ –∑–∞–ø—É—Å–∫–∞
	docker-compose build

rebuild: ## –ü–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å –∏ —Å—Ä–∞–∑—É –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã
	docker-compose up --build -d




# ===============================
# üîπ –ú–∏–≥—Ä–∞—Ü–∏–∏ –∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
# ===============================
mig: ## –ü—Ä–∏–º–µ–Ω–∏—Ç—å –≤—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ (alembic upgrade head)
	docker-compose run --rm bot alembic upgrade head

current: ## –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é –º–∏–≥—Ä–∞—Ü–∏–π
	docker-compose run --rm bot alembic current


reset1: ## –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –æ–∫—Ä—É–∂–µ–Ω–∏—è: —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∏ —Ç–æ–º–∞, –∑–∞–Ω–æ–≤–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏
	docker-compose down -v
	docker-compose up -d db test_db
	sleep 5
	docker-compose run --rm bot alembic upgrade head
	# –ø—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –∫ —Ç–µ—Å—Ç–æ–≤–æ–π –ë–î
	docker-compose run --rm bot alembic -x db_url=postgresql+psycopg2://saasuser:saaspass@saasbot_test_db:5432/saasdb_test upgrade head



reset:
	@echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ volume –ø–µ—Ä–µ–¥ —Å–±—Ä–æ—Å–æ–º..."
	@if ! docker volume inspect saas_bot_postgres_data >/dev/null 2>&1; then \
		echo "‚ö†Ô∏è Volume saas_bot_postgres_data –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî —Å–æ–∑–¥–∞—ë–º –∑–∞–Ω–æ–≤–æ..."; \
	fi
	docker-compose down
	docker-compose up -d db
	sleep 5
	docker-compose run --rm bot alembic upgrade head




fresh: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å –Ω—É–ª—è (—Å–±–æ—Ä–∫–∞, –º–∏–≥—Ä–∞—Ü–∏–∏, –∑–∞–ø—É—Å–∫ bot –∏ worker)
	docker-compose down -v
	docker-compose up --build -d db redis minio
	sleep 5
	docker-compose run --rm bot alembic upgrade head
	docker-compose up -d bot worker

psql: ## –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ psql
	docker-compose exec db psql -U saasuser -d saasdb

testpsql: ## –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ psql
	docker exec -it saasbot_test_db psql -U saasuser -d saasdb_test

midtestbaz: ## –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≤–π –±–∞–∑—ã
	SYNC_DATABASE_URL="postgresql+psycopg2://saasuser:saaspass@localhost:5433/saasdb_test" \
alembic upgrade head

tb: ## –Ω–∞–∫–∞—Ç–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–∞ —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É
	docker compose run --rm bot alembic upgrade head











# ===============================
# üîπ –î–∞–Ω–Ω—ã–µ
# ===============================
seed: ## –ó–∞–ø–æ–ª–Ω–∏—Ç—å –ë–î –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
	docker-compose exec bot python -m scripts.seed

ch_seed: ## –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
	docker-compose exec bot python -m scripts.check_seed



# ===============================
# üîπ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
# ===============================
check-fk: ## –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∏—Ç—ã–µ –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏ (FK) –≤ –ë–î
	docker-compose exec -T db psql -U saasuser -d saasdb < scripts/check_fk_safe.sql

chmod: ## –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –º–æ–¥–µ–ª–∏ Python —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏ –≤ –ë–î
	docker-compose exec bot python scripts/check_models_vs_db.py





# ===============================
# üîπ –¢–µ—Å—Ç—ã
# ===============================



test1: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å pytest –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
	docker exec -e SYNC_TEST_DATABASE_URL=postgresql+psycopg2://saasuser:saaspass@db:5432/saasdb_test \
	           -e ASYNC_TEST_DATABASE_URL=postgresql+asyncpg://saasuser:saaspass@db:5432/saasdb_test \
	           -it saasbot python -m pytest -v

testf: ##  –±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–∞ –ª–æ–∫–∞–ª—å–Ω–æ
	RESET_DB=false pytest -v -m smoke

tenum: ## –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é enum (pytest –¥–ª—è enums)
	docker-compose exec bot pytest -q tests/test_enum_sync.py



tfile: ## —Ç–µ—Å—Ç —Ä–∞–±–æ—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
	docker compose run --rm bot python -m scripts.test_s3

clean-s3: ##  –û—á–∏—Å—Ç–∫–∞ bucket, —É–¥–∞–ª—è–µ—Ç –í–°–ï –æ–±—ä–µ–∫—Ç—ã
	docker compose run --rm bot python -m scripts.clear_s3

	docker compose run --rm bot python -m scripts.test_cascades.py
	pytest -q tests/test_cascades.py


clean-s3-keep: ##  –û—á–∏—Å—Ç–∫–∞ bucket, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–∞–ø–∫—É uploads/
	docker compose run --rm bot python -m scripts.clear_s3 --keep-uploads

tc: ##  –ü—Ä–æ–æ–≤–µ—Ä–∫–∞ –∫–∞—Å–∫–∞–¥–æ–≤ –∏ soft delete
	docker compose run --rm bot pytest -s tests/test_cascades.py

tc2: ##  –ü—Ä–æ–æ–≤–µ—Ä–∫–∞ –∫–∞—Å–∫–∞–¥–æ–≤ –∏ soft delete
	docker compose run --rm bot pytest -v tests/test_cascade_relations.py

t:  ## –ø—Ä–æ–≥–Ω–∞—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã
	docker compose run --rm bot pytest -s

taudit: ## —Ç–µ—Å—Ç –∞—É–¥–∏—Ç–∞ —á–µ—Ä–Ω–æ–≥–æ —è—â–∏–∫–∞ —Ä—É—á–Ω–æ–π —Å–∫—Ä–∏–ø—Ç
	docker compose run --rm bot pytest -s tests/test_audit_log.py


check-cascades:
	psql "$${DB_URL}" -f docs/db_cascades.sql

st: ## smoke_tests
	pytest -m smoke -v

st1: ## smoke_tests
	docker compose run --rm bot /bin/sh -c \"export TEST_DATABASE_URL='postgresql+asyncpg://saasuser:saaspass@test_db:5432/saasdb_test' && \pytest tests/integration/smoke_tests.py -m smoke -v




# ===============================
# üîπ  —Ñ–∏–∫—Å
# ===============================
rch: ## –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∏–∫—Å—ã
	ruff check .

 fix: ## —á–∏—Å—Ç–∫–∞ —Ñ–∏—Å–æ–≤
	ruff check . --fix

bch: ## –ø—Ä–æ–≤–µ—Ä–∫–∞
	black .

ich: ## –ø—Ä–æ–≤–µ—Ä–∫–∞
	isort .









clean: ## –æ—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å –≥–µ—Ç–ª–∞–±–∞
	@echo "üßπ Cleaning up Python cache and build artifacts..."
	find . -type d -name "__pycache__" -exec rm -rf {} +
	find . -type f -name "*.pyc" -delete
	find . -type f -name "*.pyo" -delete
	find . -type f -name "*.pyd" -delete
	rm -rf build/ dist/ *.egg-info .pytest_cache .coverage htmlcov


delci: ## –£–¥–∞–ª–∏—Ç—å –≤—Å–µ .—Ñ–∞–π–ª —Ñ–∞–π–ª—ã
	find . -name ".DS_Store" -type f -delete


# ===============================
# üîπ    –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞—Ö
# ===============================

cont1: ##  —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
	docker compose ps

cont2: ##  –∏–ª–∏ —Ç–∞–∫
	docker ps

conf1: ##  –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	docker compose config



# ===============================
# üîπ Runner (GitFlic CI/CD Agent)
# ===============================

REG_URL=https://coordinator.gitflic.ru/-/runner/registration
REG_TOKEN=7fb3dc42-5653-40a3-a3c7-201a0c338104
CONTAINER_NAME=gitflic-runner
IMAGE=registry.gitflic.ru/company/gitflic/runner:latest

runner-up: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞–Ω–Ω–µ—Ä
	docker run -d --name $(CONTAINER_NAME) \
			--restart always \
			-e REG_URL="$(REG_URL)" \
			-e REG_TOKEN="$(REG_TOKEN)" \
			-v /var/run/docker.sock:/var/run/docker.sock \
			$(IMAGE)

runner-down: ## –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ —É–¥–∞–ª–∏—Ç—å —Ä–∞–Ω–Ω–µ—Ä
	docker rm -f $(CONTAINER_NAME) || true

runner-logs: ## –°–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏ —Ä–∞–Ω–Ω–µ—Ä–∞
	docker logs -f $(CONTAINER_NAME)

runner-status: ## –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ä–∞–Ω–Ω–µ—Ä–∞
	docker ps | grep $(CONTAINER_NAME) || true

runner-restart: ## –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞–Ω–Ω–µ—Ä
	$(MAKE) runner-down
	$(MAKE) runner-up


# ===============================
# üîπ  –†–∞–±–æ—Ç–∞ —Å —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑–æ–π
# ===============================

# Docker Compose —Ñ–∞–π–ª –¥–ª—è —é–Ω–∏—Ç-—Ç–µ—Å—Ç–æ–≤
UNIT_COMPOSE = docker-compose -f docker/docker-compose.unit.yml
TEST_DB_CONTAINER = docker-saasbot_test_db-1
DB_USER = saasuser
DB_NAME = saasdb_test
BACKUP_FILE = saasdb_test_backup.sql

## üöÄ –ü–æ–¥–Ω—è—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É –≤ —Ñ–æ–Ω–µ -3
db-up:
	$(UNIT_COMPOSE) up -d saasbot_test_db

## üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É
db-stop:
	$(UNIT_COMPOSE) stop saasbot_test_db

## ‚ùå –ü–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑—ã (–¥–∞–Ω–Ω—ã–µ –≤–Ω—É—Ç—Ä–∏ –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã!) -2
db-rm:
	$(UNIT_COMPOSE) rm -f saasbot_test_db

## üíæ –°–¥–µ–ª–∞—Ç—å –¥–∞–º–ø (–±—ç–∫–∞–ø) —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑—ã –≤ —Ñ–∞–π–ª $(BACKUP_FILE) -1
db-backup:
	docker exec -t $(TEST_DB_CONTAINER) pg_dump -U $(DB_USER) $(DB_NAME) > $(BACKUP_FILE)

## ‚ôªÔ∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –∏–∑ –¥–∞–º–ø–∞ $(BACKUP_FILE) -4
db-restore:
	cat $(BACKUP_FILE) | docker exec -i $(TEST_DB_CONTAINER) psql -U $(DB_USER) -d $(DB_NAME)

## üêö –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑–µ —á–µ—Ä–µ–∑ psql
db-psql:
	docker exec -it $(TEST_DB_CONTAINER) psql -U $(DB_USER) -d $(DB_NAME)

## üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É —Å –Ω—É–ª—è (rm ‚Üí up)
db-recreate:
	db-rm db-up

## üîÑ –∏–º–µ–Ω–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
nemebd:
	docker ps --format "table {{.Names}}\t{{.Status}}"


unitt: #—é–Ω–∏—Ç —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ
	docker compose -f docker/docker-compose.unit.yml up --build tests

integrt: #—Å–º–æ–æ–∫ - –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ
	docker compose -f docker/docker-compose.integration.yml up --build --abort-on-container-exit



# ===============================
# üîπ CI / –ü–æ–ª–Ω—ã–π –ø—Ä–æ–≥–æ–Ω —Ç–µ—Å—Ç–æ–≤ - —ç—Ç–æ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å
# ===============================
citest: ## –ü–æ–ª–Ω—ã–π –ø—Ä–æ–≥–æ–Ω CI: –ø–æ–¥–Ω–∏–º–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã, –º–∏–≥—Ä–∞—Ü–∏–∏, –ø—Ä–æ–≥–æ–Ω —Ç–µ—Å—Ç–æ–≤, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
	@echo "üöÄ –ü–æ–¥–Ω–∏–º–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ..."
	docker-compose up -d db test_db redis minio
	@sleep 5  # –∂–¥—ë–º, –ø–æ–∫–∞ –ë–î –∏ MinIO –±—É–¥—É—Ç –≥–æ—Ç–æ–≤—ã
	@echo "üõ† –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏..."
	docker-compose run --rm --service-ports bot alembic upgrade head
	docker-compose run --rm --service-ports bot alembic -x db_url=postgresql+asyncpg://saasuser:saaspass@test_db:5432/saasdb_test upgrade head
	@echo "üß™ –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã..."
	docker-compose run --rm --service-ports bot pytest -v
	@echo "üßπ –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ..."
	docker-compose down -v

citest2:
	@echo "üöÄ –ü–æ–¥–Ω–∏–º–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ..."
	docker-compose up -d db test_db redis minio
	@echo "üßπ –ß–∏—Å—Ç–∏–º —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É..."
	docker exec -i saasbot_test_db psql -U saasuser -d saasdb_test -c "DROP SCHEMA public CASCADE; CREATE SCHEMA public;"
	@echo "üõ† –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏..."
	docker-compose run --rm --service-ports bot alembic upgrade head
	@echo "üß™ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã..."
	docker-compose run --rm bot pytest -vv

citest3:
	@echo "üöÄ –ü–æ–¥–Ω–∏–º–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ..."
	docker-compose up -d db test_db redis minio
	@sleep 5
	@echo "üßπ –ß–∏—Å—Ç–∏–º —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É..."
	docker exec -i saasbot_test_db psql -U saasuser -d saasdb_test -c "DROP SCHEMA public CASCADE; CREATE SCHEMA public;"
	@echo "üõ† –ó–∞–ø—É—Å–∫–∞–µ–º pytest..."
	docker-compose run --rm bot pytest -vv tests/smoke --log-cli-level=INFO

pyt:
	pytest -vv

tdoc:
	docker compose -f docker-compose.test.yml run --rm bot pytest -v

tloc: ## Run isolated test suite
	./scripts/run_tests.sh


# ===============================
# üîπ CI / –æ—Ç–ª–∞–¥–∫–∞ —Ç–µ—Å—Ç–æ–≤ –ª–æ–∫–∞–ª—å–Ω–æ
# ===============================

test-local: ## Run isolated test suite
	./scripts/run_tests.sh



# ===============================
# üîπ Git –≤–µ—Ç–∫–∏
# ===============================
blist: ## –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤–µ—Ç–∫–∏
	git branch -a

branch-new: ## –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≤–µ—Ç–∫—É (–ø—Ä–∏–º–µ—Ä: make branch-new name=fix/feature)
	@if [ -z "$(name)" ]; then \
		echo "‚ùå –ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∏–º—è –≤–µ—Ç–∫–∏, –ø—Ä–∏–º–µ—Ä:"; \
		echo "   make branch-new name=fix/feature"; \
		exit 1; \
	fi
	git checkout -b $(name)

branch-switch: ## –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≤–µ—Ç–∫—É (–ø—Ä–∏–º–µ—Ä: make branch-switch name=main)
	@if [ -z "$(name)" ]; then	 \
		echo "‚ùå –ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∏–º—è –≤–µ—Ç–∫–∏, –ø—Ä–∏–º–µ—Ä:"; \
		echo "   make branch-switch name=main"; \
		exit 1; \
	fi
	git checkout $(name)

branch-delete: ## –£–¥–∞–ª–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é –≤–µ—Ç–∫—É (–ø—Ä–∏–º–µ—Ä: make branch-delete name=fix/old)
	@if [ -z "$(name)" ]; then \
		echo "‚ùå –ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∏–º—è –≤–µ—Ç–∫–∏, –ø—Ä–∏–º–µ—Ä:"; \
		echo "   make branch-delete name=fix/old"; \
		exit 1; \
	fi
	git branch -d $(name)

branch-push: ## –ó–∞–ø—É—à–∏—Ç—å —Ç–µ–∫—É—â—É—é –≤–µ—Ç–∫—É –Ω–∞ remote (–ø—Ä–∏–º–µ—Ä: make branch-push name=fix/feature)
	@if [ -z "$(name)" ]; then \
		echo "‚ùå –ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∏–º—è –≤–µ—Ç–∫–∏, –ø—Ä–∏–º–µ—Ä:"; \
		echo "   make branch-push name=fix/feature"; \
		exit 1; \
	fi
	git push origin $(name)

branch-merge: ## –í–ª–∏—Ç—å —É–∫–∞–∑–∞–Ω–Ω—É—é –≤–µ—Ç–∫—É –≤ —Ç–µ–∫—É—â—É—é (–ø—Ä–∏–º–µ—Ä: make branch-merge name=fix/feature)
	@if [ -z "$(name)" ]; then \
		echo "‚ùå –ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∏–º—è –≤–µ—Ç–∫–∏, –ø—Ä–∏–º–µ—Ä:"; \
		echo "   make branch-merge name=fix/feature"; \
		exit 1; \
	fi
	git merge $(name)

branch-status: ## –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–π –≤–µ—Ç–∫–∏
	git status

checkv: ##   –ø–æ–º–µ–Ω—è—Ç—å –≤–µ—Ç–∫—É
	git checkout main



# ===============================
# üîπ  CI –ø—É—à–∏–º
# ===============================

stat: ## –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å git
	git status

add: ## –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∏–Ω–¥–µ–∫—Å
	git add .

com: ## –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è (–ø—Ä–∏–º–µ—Ä: make com m="fix: ci config")
	@if [ -z "$(m)" ]; then \
		echo "‚ùå –ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–∏–º–µ—Ä:"; \
		echo "   make com m=\"fix: ci config\""; \
		exit 1; \
	fi
	git commit -m "$(m)"


c2: ## –ö–æ–º–º–∏—Ç–∏–º –≤ –≤–µ—Ç–∫—É
	git commit -m "fix(ci): update postgres host for CI tests"

puch: ## –ü—É—à–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ main
	git push origin main

p2: ## –ü—É—à–∏–º –≤ –≤–µ—Ç–∫—É
	git push origin feature/phase4-observability




# ===============================
# üîπ  CI –ø—É—à–∏–º –∏–∑ –≤–µ—Ç–∫–∏ –≤ –º–∞–∏–Ω
# ===============================

pvm: ## –ü–µ—Ä–µ–∫–ª—é—á–∏—à—å—Å—è –Ω–∞ main
	git checkout main

puchvmain: ## –ø–æ–¥—Ç—è–≥–∏–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –º–∞–π–∏–Ω
	git pull origin main

logspr: ## –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –ª–æ–≥
	git log --oneline -5

delvet: ## –£–¥–∞–ª—è–µ–º –Ω–µ–Ω—É–∂–Ω—É—é –≤–µ—Ç–∫—É –ª–æ–∫–∞–ª—å–Ω–æ
	git branch -d feature/observability

delvet2: ## –£–¥–∞–ª—è–µ–º –Ω–µ–Ω—É–∂–Ω—É—é –≤–µ—Ç–∫—É –ª–æ–∫–∞–ª—å–Ω–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
	git branch -D feature/observability

delvgit: ## –£–¥–∞–ª—è–µ–º –≤–µ—Ç–∫—É –Ω–∞ GitHub (—É–¥–∞–ª—ë–Ω–Ω—É—é)
	git push origin --delete feature/observability



# ===============================
# üîπ  —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≤–µ—Ç–∫—É
# ===============================

remgit: ## –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∫–æ–π —Å–µ–π—á–∞—Å - –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è–º–∏
	git remote -v

# –£–±–µ–¥–∏—Å—å, —á—Ç–æ —Ç—ã –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏ main
	# git checkout main
	# git pull origin main

newvet1: ## –°–æ–∑–¥–∞–π –∏ —Å—Ä–∞–∑—É –ø–µ—Ä–µ–∫–ª—é—á–∏—Å—å –Ω–∞ –Ω–æ–≤—É—é –≤–µ—Ç–∫—É
	git checkout -b feature/phase4-observability

punv: ## –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –≤–µ—Ç–∫—É –Ω–∞ GitHub –ø—É—à –Ω–æ–≤–æ–π –≤–µ—Ç–∫–∏ –≤ –≥–∏—Ç—Ö–∞–±
	git push -u origin feature/phase4-observability


# –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ

ydi: ## —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –∏–∑ –∏–Ω–¥–µ–∫—Å–∞
	git rm --cached migrations/versions/–∏–º—è-—Ñ–∞–π–ª–∞.py
ydf: ## —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –ª–æ–∫–∞–ª—å–Ω–æ
	rm migrations/versions/–∏–º—è-—Ñ–∞–π–ª–∞.py


# ===============================
# üîπ  –æ—Ç–ª–∞–¥–∫–∞ –ø–µ—Ä–µ–¥ –ø—É—à–µ–º
# ===============================


.PHONY: format lint

form:
	black .
	ruff check --fix .
	flake8 .

lint:
	ruff check .
	black --check .
	flake8 .




testbazaud: ## —É–¥–∞–ª–µ–Ω–∏–µ –±–∞–∑—ã —Ç–µ—Å—Ç–æ–≤–æ–π –∏ —Ç–∞–±–ª–∏—Ü –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π
	docker exec -it saasbot_test_db psql -U saasuser -d saasdb_test -c "DROP SCHEMA public CASCADE; CREATE SCHEMA public;"

migrvtbaz: ## –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –≤ —Ç–µ—Å—Ç–æ–≤–æ–π
	docker-compose run --rm bot alembic upgrade head


remgit2: ##  –≤–∫–ª—é—á–µ–Ω–∏–µ –¥—Ä—É–≥–æ–≥–æ
	git remote set-url origin https://github.com/sagrador/saasboot.git




# ===============================
# üîπ  –æ—Ç–ª–∞–¥–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑—ã –∏ –±–∞–∑—ã —Å–∏
# ===============================

dcom: ##   –æ—Å—Ç–∞–Ω–≤–æ–∫–∞ –∫—Ç–µ–π–Ω–µ—Ä–≤–æ
	docker compose down -v

dct: ##     —Ç–æ–ª—å–∫–æ –∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
	docker compose up -d test_db

pcon: ##   –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–Ω—è–ª—Å—è –ª–∏
	docker compose ps




# ===============================
# üîπ –ß—Ç–æ–±—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ —á–∏—Å—Ç–∏—Ç—å docker-–º—É—Å–æ—Ä
# ===============================


clean-docker: ## –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ docker
	@echo "üßπ Cleaning up unused Docker resources (safe mode)..."
	@docker system prune -f
	@docker volume prune -f --filter "label=temporary=true" || true
	@echo "‚úÖ Docker cleanup complete."


clean-docker-hard: ## –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –ü–û–õ–ù–£–Æ –æ—á–∏—Å—Ç–∫—É (—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º)
	@echo "‚ö†Ô∏è WARNING: This will remove ALL images, volumes, and caches!"
	@read -p "Type 'yes' to continue: " confirm && [ "$$confirm" = "yes" ] && docker system prune -a --volumes

# ===============================
# üîπ –ß—Ç–æ–±—ã Docker –Ω–µ ‚Äú–∂—Ä–∞–ª‚Äù 20‚Äì30 –ì–ë –¥–∏—Å–∫–∞, –¥–µ–ª–∞–π –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é —á–∏—Å—Ç–∫—É:
# ===============================

dsp: ##
	docker system prune -af
dvp: ##
	docker volume prune -f
dbp: ##
	docker builder prune -af
dsd: ## –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –∑–∞–Ω–∏–º–∞–µ—Ç –º–µ—Å—Ç–æ:
	docker system df


# ===============================
# üîπ  –≤–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–æ–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –µ—â–µ –Ω–∞–¥–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å
# ===============================

db-backup1: # –°–¥–µ–ª–∞—Ç—å –±—ç–∫–∞–ø –≤—Ä—É—á–Ω—É—é
	@echo "üì¶ Creating backup..."
	@docker exec saasbot_backup /backups_scripts/backup_db.sh
	@echo "‚úÖ Backup created."

db-restore-latest: # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–æ–ø–∏—é
	@LATEST_FILE=$$(ls -t backups/backup_saasdb_*.sql.gz | head -n 1); \
	echo "‚ôªÔ∏è  Restoring from $$LATEST_FILE..."; \
	docker exec -i saasbot_db bash -c "gunzip -c /backups/$$(basename $$LATEST_FILE) | pg_restore -U saasuser -d saasdb -c"; \
	echo "‚úÖ Restore complete."

db-verify-backup: # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å (–≤ test_db)
	@LATEST_FILE=$$(ls -t backups/backup_saasdb_*.sql.gz | head -n 1); \
	echo "üß™ Verifying $$LATEST_FILE..."; \
	docker exec -i saasbot_test_db bash -c "gunzip -c /backups/$$(basename $$LATEST_FILE) | pg_restore -U saasuser -d saasdb -c"; \
	echo "‚úÖ Backup verified successfully."

# –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –±—ç–∫–∞–ø–æ–≤
db-list-backups:
	@docker exec saasbot_db ls -lh /backups | tail -n +2


# ===============================
# üîπ  –≤–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ —Ä—É—á–Ω—É—é
# ===============================

kpu: # –£–±–µ–¥–∏—Å—å, —á—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä saasbot_db –∑–∞–ø—É—â–µ–Ω:
	docker ps | grep saasbot_db

bec: # –ö–∏–Ω—å –±—ç–∫–∞–ø –≤–Ω—É—Ç—Ä—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –Ω—É–∂–Ω–æ–≥–æ –±–µ–∫–∞–ø–∞
	docker cp backups/backup_saasdb_20251010074500.sql.gz saasbot_db:/tmp/backup.sql.gz

vnb: # –ü–æ–¥–∫–ª—é—á–∏—Å—å –≤–Ω—É—Ç—Ä—å –±–∞–∑—ã:
	docker exec -it saasbot_db bash

pr1: # –£–±–µ–¥–∏—Å—å, —á—Ç–æ –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω:
	psql -U saasuser -d postgres -c "SELECT pid, datname, usename, client_addr FROM pg_stat_activity WHERE datname='saasdb';"
	# –ï—Å–ª–∏ —É–≤–∏–¥–∏—à—å —Å–µ—Å—Å–∏–∏ ‚Äî –º–æ–∂–µ—à—å –∏—Ö —É–±–∏—Ç—å:
	psql -U saasuser -d postgres -c "SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE datname='saasdb';"

delbd: # –£–¥–∞–ª–∏ —Å—Ç–∞—Ä—É—é –±–∞–∑—É –∏ —Å–æ–∑–¥–∞–π –∑–∞–Ω–æ–≤–æ:
	export PGPASSWORD=saaspass
	psql -U saasuser -d postgres -c "DROP DATABASE IF EXISTS saasdb;"
	psql -U saasuser -d postgres -c "CREATE DATABASE saasdb;"

vbek: # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏ –±—ç–∫–∞–ø:
	gunzip -c /tmp/backup.sql.gz | pg_restore -U saasuser -d saasdb -h localhost

prov: # –ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–æ—Å—å:
	psql -U saasuser -d saasdb -c "\dt"
